/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package booklist;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/*
Programmer: David Guo
Date: 2019-08-06
Program Name: BookListForm
Program Description: Creates an application that uses a binary search and 
* linear search to display the title of a children's book given a user 
* inputted reference number.
*/
public class BookListForm extends javax.swing.JFrame {

    /**
     * Creates new form BookListForm
     */
    
    /* Pre: User must click button.
    * Post: An array must be generated from the text file.
    */
    public String[] generateList() {
        // Create an array list of books
        ArrayList <String> books = new ArrayList <String>();
        // Create a null buffered reader
        BufferedReader br = null;
        
        // Read text file
        try {
            br = new BufferedReader(new FileReader("Booklist.txt"));
           // Add each line to the arrayList, stop when next line is blank
            String word;
            while ((word = br.readLine()) != null ){
                books.add(word);
            }
        } catch (IOException e) {
                e.printStackTrace();
        } finally {
            try {
                // Close the buffered reader
                br.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    // Create an array of books
    String [] bookList = new String[books.size()];
    // Convert the arrayList to an array
    books.toArray(bookList);
    return bookList;
    }  

    /* Pre: User must input the necessary reference number, and an array of books
    * must have been created.
    * Post: Using sorted linear search, the array must have been parsed through, 
    * and either a book name or empty string must be returned.
    */
    public static String linearSearch(String [] bookList, String referenceNo) {
        // Loop through the array 
        for (int k=0; k< bookList.length; k++) {
            // Check if the indicated string is equal to the reference string
            if (bookList[k].equals(referenceNo)) {
                // Return book string if found
                return bookList[k+1];
            }
        }
        // Return empty string if nothing found
    return "";
    }
    
    /* Pre: User must input the necessary reference number, and an array of books
    * must have been created.
    * Post: Using sorted binary search, the integer components of the array 
    * must be parsed through, returning either a match with the reference number,
    * or returning a negative value.
    */
    public static int binarySearch(String [ ] bookList,  int referenceNo) {
        // Create a temporary array half the size of the book array
        int[] tempBookArray = new int[bookList.length/2];
        
        // Add only the number values, which are located in the even positions
        for (int i = 0; i < bookList.length/2; i++) {
            tempBookArray[i] = Integer.parseInt(bookList[i*2]);
        }
        
        // Sort this int array
        Arrays.sort(tempBookArray);
        // Initialize middle variable
        int middle;
        // Set the beginning to 0
        int left = 0;
        // Set the end to the index of the last element
        int right = tempBookArray.length - 1;
        
        /* A non-recursive binary search was used, as the recursive variant 
        * continually ran into errors. The integer references associated with
        * each book is being used to simplify the problem.
        */
        // Set exit condition
        while (left <= right) {
            // Calculate the middle value
            middle = (left + right)/2 ;

            // If the value found at the middle is less than the reference, remove the top half of the array
            if (tempBookArray[middle] < referenceNo) {
                left = middle + 1;
            }
             // If the value found at the middle is greater than the reference, remove the bottom half of the array
            else if (tempBookArray[middle] > referenceNo) {
                right = middle - 1;
            }
            else {
                // Return the middle value if a match has been found
                return middle;
            }
         }
        // Return negative value if no matches are found
         return -1;
     }
 
    public BookListForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        numberInput = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        linearDisplay = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        binaryDisplay = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Children's Classics");

        jLabel2.setText("This program will find the title of a book according to the library reference number.");

        jLabel3.setText("The program will use a Binary Search and a Linear Search.");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText(" ENTER REFERNCE #:");

        search.setText("Find It!");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel5.setText("Linear Search:");

        jLabel6.setText("Binary Search:");

        linearDisplay.setColumns(20);
        linearDisplay.setRows(5);
        jScrollPane1.setViewportView(linearDisplay);

        binaryDisplay.setColumns(20);
        binaryDisplay.setRows(5);
        jScrollPane2.setViewportView(binaryDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(numberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(search))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(61, 61, 61)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(search)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel5)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
         // Declare initial variables
        // Generate bookList array
        String[] bookList = generateList(); 
        int referenceNo;
        String titleLinear;
        String titleBinary;
        
        // Input validation to check user input is an integer
        try {
               referenceNo = Integer.parseInt(numberInput.getText());
               
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid reference number",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        
        // Call and display result of the linear search
        // Display a not found message if the method returns an empty string
        titleLinear = linearSearch(bookList, Integer.toString(referenceNo));
        if (titleLinear.equals("")) {
            JOptionPane.showMessageDialog(this, "Book not found.",
                        "Linear Search Result", JOptionPane.ERROR_MESSAGE);
        }
        else {
        linearDisplay.setText(titleLinear);
        }
        
        // Call and display result of the binary search
        try {
            // Check if the returned value is positive
            /*Multiply the returned middle value by 2, as the temporary array
            * was halved. Add 1 to get the book's string.
            */
            titleBinary = bookList[binarySearch(bookList, referenceNo) *2 + 1];
            // Display it.
            binaryDisplay.setText(titleBinary);
        }
        catch (Exception e) {
            // Display a not found message, if the returned value is negative.
            JOptionPane.showMessageDialog(this, "Book not found.",
                        "Binary Search Result", JOptionPane.ERROR_MESSAGE);
        }
        
                    
    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookListForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea binaryDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea linearDisplay;
    private javax.swing.JTextField numberInput;
    private javax.swing.JButton search;
    // End of variables declaration//GEN-END:variables
}
